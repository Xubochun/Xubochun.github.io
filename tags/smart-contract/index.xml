<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>smart contract on Xubo’Log</title>
    <link>https://xubochun.github.io/tags/smart-contract/</link>
    <description>Recent content in smart contract on Xubo’Log</description>
    <image>
      <title>Xubo’Log</title>
      <url>https://xubochun.github.io/%3Clink%20or%20path%20of%20image%20for%20opengraph,%20twitter-cards%3E</url>
      <link>https://xubochun.github.io/%3Clink%20or%20path%20of%20image%20for%20opengraph,%20twitter-cards%3E</link>
    </image>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Mon, 05 Dec 2022 19:59:44 +0800</lastBuildDate><atom:link href="https://xubochun.github.io/tags/smart-contract/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>區塊鏈(五) - 在私有鏈上部署智能合約 Part 1</title>
      <link>https://xubochun.github.io/posts/2022-12-05-deploy-smart-contracts-on-private-chains/</link>
      <pubDate>Mon, 05 Dec 2022 19:59:44 +0800</pubDate>
      
      <guid>https://xubochun.github.io/posts/2022-12-05-deploy-smart-contracts-on-private-chains/</guid>
      <description>劇情回顧：
區塊鏈(一) - 建立以太坊私有鏈 區塊鏈(二) - 創建虛擬錢包 區塊鏈(三) - MetaMask 加密貨幣錢包 區塊鏈(四) - 智能合約的開發工具 上一集提到可以利用 Remix-Ethereum IDE 來撰寫智能合約以及測試智能合約，如果還不熟悉過程的快去看看喔！
首先，這是很多人的疑問，就是雖然可以在線上進行智能合約的測試，但如果要將寫好的合約部署到私有鏈上該怎麼做呢？
其中，有兩個方法可以進行：
第一種部署智能合約的方法 當我們寫好一個智能合約時，就像寫一段程式碼一樣，需要將這段程式碼進行編譯。完成編譯後，可以將目光轉移到下方的三個按鈕。
最下面一個「Compilation Details」點擊後會出現有關這項合約的詳細資訊。
Fig. 1. compilation details. 在這裡，我們可以找到「WEB3DEPLOY」的標題。
下方所寫的內容其實就是這項合約部署的指令。根據這些指令，我們可以在開啟私有鏈的 CMD 環境中執行來部署合約。
Fig. 2. WEB3DEPLOY. 部屬時可能會發生的錯誤訊息 請注意，如果你輸入指令後出現錯誤訊息，可以嘗試以下步驟進行修改，來完成「透過指令來部署合約」。
當你遇到相同的錯誤時，需要更正指令為 new web3.eth.contract。請注意，new 需要刪除，同時 C 需要改為小寫。最後，只需要輸入以下指令： var testContract = web3.eth.contract([...]) Fig. 3. var testContract. 可以呼叫 testContract 出來查看合約。
Fig. 4. testContract. 再來 testContract.deploy 需要改成 testContract.new，然後將註解部分移動到正確位置。
var test = testContract.new({ data: &amp;#39;0x60806...（數字太長省略）&amp;#39;, arguments: [], // 將 from 和 gas 移動上來，其餘不變。 from: web3.</description>
    </item>
    
    <item>
      <title>區塊鏈(四) - 智能合約的開發工具</title>
      <link>https://xubochun.github.io/posts/2022-12-04-remix-ide/</link>
      <pubDate>Mon, 05 Dec 2022 19:28:48 +0800</pubDate>
      
      <guid>https://xubochun.github.io/posts/2022-12-04-remix-ide/</guid>
      <description>劇情回顧：
區塊鏈(一) - 建立以太坊私有鏈 區塊鏈(二) - 創建虛擬錢包 區塊鏈(三) - MetaMask 加密貨幣錢包 現在我們已經擁有私有鏈的環境，也有了可以進行挖礦和帳戶，這次稍微進階一點，說一點有關於智能合約。
Remix 介紹一個智能合約編譯器 Remix - Ethereum IDE 可以在上面進行智能合約的撰寫、測試等。
這邊就寫一個簡單的智能合約，我們希望合約來幫助我們做運算，簡單的說明一下，合約中存著一個變數，用戶可以對合約輸入一個數字，合約會將數字乘上 10 倍，並且可以透過公開的變數來查看當前數字是多少。
// SPDX-License-Identifier: MIT pragma solidity ^0.8.4; contract TestContract { uint public number; function multiply(uint a) public { number = a * 10; } } 許多人可能會遇到在 Remix 編譯後警告訊息，若是出現有關「SPDX license identifier」的訊息，就需要在程式碼第一行加入喔！
參考來源：Warning: SPDX license identifier not provided in source file。
Remix compiler 切記寫好程式碼以後，要記得先點選「Compile TestContract.sol」，才會對你的程式碼進行編譯喔！
Fig. 1. solidity compiler. 接下來我們就簡單進行操作一下，來觀察一下合約的執行動作。
先從環境中使用「JavaScript VM」進行合約測試，如果直接將智能合約部署到私有鏈中，想修改都沒辦法喔，只有重新部署一個新的才行，這點要非常注意。</description>
    </item>
    
  </channel>
</rss>
